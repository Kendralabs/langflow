trigger:
  branches:
    include:
      - workbench  # Trigger pipeline only on workbench branch

pool:
  vmImage: 'ubuntu-latest'

variables:
  imageName: 'langflow-app'

steps:
  - task: SSH@0
    displayName: 'Deploy Latest Changes from Workbench Branch'
    inputs:
      sshEndpoint: 'ssh'  # Replace with the actual SSH service connection name
      runOptions: 'inline'
      inline: |
        # Navigate to the deployment directory
        cd /home/azureuser/langflow || exit 1

        # Ensure the correct branch and pull the latest changes
        echo "Ensuring we are on the correct branch and fetching latest changes..."
        git fetch origin workbench
        git checkout workbench || git checkout -b workbench origin/workbench
        git reset --hard origin/workbench  # Ensure local branch matches remote exactly
        git log -1  # Display the latest commit for debugging

        # Stop and clean up all running containers (if any)
        echo "Stopping and removing existing Docker containers..."
        if [ "$(docker ps -q)" ]; then
          docker rm -f $(docker ps -q) || true
        else
          echo "No containers to stop."
        fi

        # Remove all unused Docker images (if any)
        echo "Removing unused Docker images..."
        if [ "$(docker images -q)" ]; then
          docker rmi -f $(docker images -q) || true
        else
          echo "No images to remove."
        fi

        # Perform a Docker system prune to clean up resources
        echo "Performing system prune to clean up unused resources..."
        docker system prune -f || true

        # Rebuild and start containers with Docker Compose
        echo "Rebuilding and starting containers with Docker Compose..."
        docker-compose -f docker/dev.docker-compose.yml up --build -d

        # Verify that the containers are running
        echo "Checking if the containers are running..."
        if [ "$(docker ps -q -f name=dev-langflow)" ]; then
          echo "Containers are running successfully."
          exit 0  # Success
        else
          echo "Containers are not running. Exiting with error."
          exit 1  # Failure
        fi
