trigger:
  branches:
    include:
      - workbench  # Trigger the pipeline when changes are pushed to the 'workbench' branch

pool:
  vmImage: 'ubuntu-latest'

variables:
  dockerRegistry: 'docker'  # Docker service connection name
  dockerRepository: 'kendralabs/workbench-azure'  # Your Docker Hub repository
  tag: $(Build.BuildId)  # Unique tag for the image based on the build ID
  dockerComposeFile: 'docker/dev.docker-compose.yml'  # Path to your Docker Compose file
  deploymentDirectory: '/home/azureuser/langflow'  # Directory where your Docker Compose file is located

steps:
# Step 1: Build and Push Docker Images using Docker Compose
- task: Docker@2
  displayName: 'Build and Push Docker Images'
  inputs:
    containerRegistry: $(dockerRegistry)  # Docker service connection
    repository: $(dockerRepository)  # Repository in Docker Hub
    tags: $(tag)  # Tag the image with the build ID
    buildContext: '.'  # Build context should be the root of your repo
    command: 'buildAndPush'  # This will both build and push the images

# Step 2: SSH to the VM and Remove Old Docker Images and Clean Cache
- task: SSH@0
  displayName: 'Clean Old Docker Images and Cache'
  inputs:
    sshEndpoint: 'ssh'  # SSH service connection to your VM
    runOptions: 'inline'
    inline: |
      echo "Removing old Docker images and cleaning cache..."

      cd $(deploymentDirectory) || exit 1

      # Remove unused images
      docker image prune -f || true  # Remove unused images

      # Remove any stopped containers
      docker container prune -f || true  # Remove stopped containers

      # Remove old images if any (optional)
      docker rmi $(docker images -q) || true  # Remove old images

      # Clean up unused volumes, networks, and dangling images
      docker system prune -af || true  # Clean all unused Docker objects

      echo "Docker images and cache cleaned."

# Step 3: Pull Latest Docker Images from Docker Hub
- task: SSH@0
  displayName: 'Pull Latest Docker Images from Docker Hub'
  inputs:
    sshEndpoint: 'ssh'  # SSH service connection to your VM
    runOptions: 'inline'
    inline: |
      echo "Pulling the latest images from Docker Hub..."
      cd $(deploymentDirectory) || exit 1

      # Pull the latest Docker images for all services defined in docker-compose.yml
      docker-compose -f $(dockerComposeFile) pull

      echo "Docker images pulled successfully."

# Step 4: Perform a Rolling Deployment using Docker Compose
- task: SSH@0
  displayName: 'Rolling Deployment using Docker Compose'
  inputs:
    sshEndpoint: 'ssh'  # SSH service connection to your VM
    runOptions: 'inline'
    inline: |
      echo "Starting Rolling Deployment..."
      
      cd $(deploymentDirectory) || exit 1
      
      # Perform the rolling update by starting only the new/updated containers
      docker-compose -f $(dockerComposeFile) up -d --no-deps --build
      
      # Check if the containers are running properly
      running_containers=$(docker ps -q -f name=dev-langflow)
      
      if [ -n "$running_containers" ]; then
        echo "Containers are running successfully."
        exit 0  # Success
      else
        echo "Containers are not running. Exiting with error."
        exit 1  # Failure
